import {User} from "../models/userModel.js";
import {generateToken} from "../config/jwtToken.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

export const getUsers = async (req, res) => {
  try {
    const users = await User.find({role: "buyer"});
    res.status(200).json(users);
  } catch (err) {
    res.status(404).json({error: err.message});
  }
};

export const createUser = async (req, res) => {
  try {
    if (req.body.role !== "buyer") {
      res
        .status(403)
        .json({error: "You are not authorized to create this user!"});
    }

    const email = req.body.email;
    const findUser = await User.findOne({email});

    if (findUser) {
      res.status(400).json({message: "User already exists"});
    }

    const newUser = new User.create(req.body);
    await newUser.save();
    res.status(201).json(newUser);
  } catch (err) {
    res.status(400).json({error: err.message});
  }
};

export const deleteUserByID = async (req, res) => {
  try {
    if (req.params.role !== "buyer") {
      res
        .status(403)
        .json({error: "You are not authorized to delete this user!"});
    }

    const id = req.params.id;
    const delUser = await User.findOneAndDelete({id});

    if (!delUser) {
      res.status(404).json({error: "User doesn't exist!"});
      return;
    }
    res.status(204).json({message: "User successfully deleted"});
  } catch (err) {
    res.status(404).json({error: err.message});
  }
};

export const loginUser = async (req, res) => {
  try {
    if (res.body.role !== "buyer") {
      res.status(403).json({error: "You are not authorized to login!"});
    }

    const {email, password} = req.body;

    // check if user exists or not
    const findUser = await User.findOne({email});

    if (findUser) {
      const passwordMatch = await bcrypt.compare(password, findUser.password);

      if (!passwordMatch) {
        res.status(400).json({error: "Password doesn't match"});
      }

      const accessToken = jwt.sign(
        {id: findUser._id, role: "buyer"},
        process.env.ACCESS_TOKEN_SECRET,
        {new: true}
      );

      // Refresh tokens are random strings generated by the authentication server.
      // They are generated after successful authentication
      const refreshToken = await generateToken(findUser._id);
      const updateUser = await User.findByIdAndUpdate(
        findUser?._id,
        {refreshToken: refreshToken},
        {new: true}
      );
      res.cookie("refreshToken", refreshToken, {
        httpOnly: true,
        maxAge: 72 * 60 * 60 * 1000,
      });

      // return token
      res.status(200).json({
        _id: findUser?._id,
        name: findUser?.name,
        email: findUser?.email,
        mobile: findUser?.mobile,
        token: accessToken,
      });
    } else {
      res.status(400).json({error: "User doesn't exist"});
    }
  } catch (err) {
    res.status(400).json({error: err.message});
  }
};

export const getUserByName = async (req, res) => {
  // try {
  //   const name = req.params.name;
  //   const user = await User.find({name});
  //   if (user.length === 0) {
  //     return res.status(404).json({error: "User not found!"});
  //   }
  //   res.status(200).json(user);
  // } catch (err) {
  //   res.status(404).json({error: err.message});
  // }
};

export const logoutUser = async (req, res) => {
  try {
    if (req.params.role !== "buyer") {
      res.status(403).json({error: "You are not authorized to logout!"});
    }
  } catch (err) {
    res.status(400).json({error: err.message});
  }
};
